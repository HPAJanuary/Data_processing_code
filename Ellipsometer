import numpy as np
import math
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import csv
import matplotlib
from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                               AutoMinorLocator)

# Read csv file
from google.colab import drive
drive.mount('/content/drive')
import csv

# csv file recall
def openElp(x): # input file name x as string
  %cd '../content/drive/MyDrive/Ellipsometer/'
  file=open(x)
  data=csv.reader(file)
  data = list(data)
  data = np.array(data, dtype=np.float)
  return data.T # i.e. (nx2)-->(2xn), x[0] is the first column
# Import data
# Name = openElp('file_name')

# Linear regression fit
def fit_func(x,a):
    return a*x

def Linear_regression(x,y):
    popt, pcov = curve_fit(fit_func, x, y)
    residuals = y - fit_func(x,*popt)
    ss_res = np.sum(residuals**2)
    ss_tot = np.sum((y - np.mean(y))**2)
    r_sqr = 1 - ss_res/ss_tot
    print("y = ",popt,"*x")
    print("R^2:", r_sqr)
    return popt, pcov

# # Recall Example
# cycle1 = np.array([2,5,10,20,40,60])
# thick_Si = np.array([1.483,3.227,6.499,12.710,23.048,34.528])
# popt1, pcov1 = Linear_regression(cycle1, thick_Si)
# x1 = np.linspace(0,100,20)
# y1 = popt1*x1

# Plot with multiple y-axis
def multiy_plot(data, y_labels, y_lims):
  n_y_axis = len(data)

  # Plot size
  fig, ax = plt.subplots()
  # fig.subplots_adjust(right=0.75)
  fig.set_figheight(10)
  fig.set_figwidth(12)
  
  ax.grid(which='both')
  ax.grid(which='minor', alpha=0.2)
  ax.grid(which='major', alpha=0.5)
  ax.tick_params(axis='x', labelsize= 12)
  ax.tick_params(axis='y', labelsize= 12)
  legend_pos = ['upper left', 'upper right', 'lower left', 'lower right']
  shape = ['solid','dashed','dotted','dashdotted']

  # x-axis
  ax.set_xlim(300, 900)
  ax.set_xlabel("Wavelength(nm)",fontsize = 18)

  # First y-axis
  for i in range(1,len(data[0])):
    ax.plot(data[0][0],data[0][i],linewidth = 2.5, 
            linestyle = shape[0], label = y_labels[0] + '_' + str(i))
  ax.set_ylim(y_lims[0][0], y_lims[0][1])
  ax.set_ylabel(y_labels[0],fontsize = 18)
  ax.legend(loc = legend_pos[0])
  # Add y-axis
  for data_id in range(1, len(data)):
    twin = ax.twinx()
    twin.spines["right"].set_position(("axes", 1 + (data_id - 1) * 0.1))
    for i in range(1,len(data[data_id])):
        twin.plot(data[data_id][0],data[data_id][i], linewidth=2.5, 
                  linestyle = shape[data_id], label = y_labels[data_id] + '_' + str(i))
    twin.set_ylabel(y_labels[data_id],fontsize = 18)
    twin.set_ylim(y_lims[data_id][0],y_lims[data_id][1])
    twin.legend(loc = legend_pos[data_id])

  plt.plot()
  
# # Recall example
# data = [datafile1, datafile2]
# y_labels = ['$\Delta$', '$\delta\Delta$']
# y_lims = [[162  , 176], [-5, -2]]
# multiy_plot(data, y_labels, y_lims)

# # Example of formal data plotting (After obtaining the fitted thickness from ellipsometry, plot thickness versus cycle number)
# # Error bar is included
# # It has not been developed as a function yet due to the complexity of different marker shape, label, and color.
# fig, ax = plt.subplots(figsize=(8, 8))
# origin_like = ["#646464","#f14040","#37ad6b","#1a6fdf","#b177de","#cc9900","#00cbcc","#7d4e4e","#8e8e00","#fb6501","#6699cc","#6fb802"]
# matplotlib.rcParams['axes.prop_cycle'] = cycler('color', origin_like)

# y1err = np.array([0.241,0.099,0.136,0.155,0.235,0.289])
# plt.scatter(cycle1,thick_Si,label = 'Thickness series 1_Si/Acetone',facecolor='none',edgecolors='r',s=250, alpha = 0.7)
# plt.errorbar(cycle1,thick_Si,yerr = y1err,fmt="none", capsize = 6, ecolor = 'r')
# plt.plot(x1,y1,'r--')

# y2err = np.array([0.26,0.235,0.395,0.309,0.442,0.283]) # x2,y2 second one made   series 3
# plt.scatter(cycle,thick_Au,label = 'Thickness series 3_Au/THF',marker = "^", facecolor='none',edgecolors='k',s=250)  # THF,0.4wt%
# plt.errorbar(cycle,thick_Au,yerr = y2err,fmt="none", capsize = 6, ecolor = 'k')
# plt.plot(x2,y2,'k--', linewidth = 2)

# y3err = np.array([0.269,0.209,0.3,1.06,1.346,1.877])   # x3,y3  third one made but is series 2
# plt.scatter(cycle,thickness_1wt,label = 'Thickness series 2_Au/Acetone',marker = "^", facecolor='none',edgecolors='g',s=250) # Acetone 1wt%
# plt.errorbar(cycle,thickness_1wt,yerr = y3err,fmt="none", capsize = 6, ecolor = 'g')
# plt.plot(x3,y3,'g--',linewidth = 2)

# # Plot formatting
# ax.tick_params(axis='both', labelsize= 20) # tick label size
# ax.xaxis.set_major_locator(MultipleLocator(10)) # tick interval
# ax.xaxis.set_major_formatter(FormatStrFormatter('%d'))
# ax.xaxis.set_minor_locator(MultipleLocator(5))
# ax.tick_params(which = 'major',length=10) # tick size
# ax.tick_params(which = 'minor',length=7)
# ax.tick_params(which='both', width=2)
# matplotlib.rcParams['axes.linewidth'] = 2 # spine size
# # matplotlib.rcParams['font.sans-serif'] = "Arial"
# # matplotlib.rcParams['font.family'] = "Arial"
# plt.grid()
# ax.set_ylabel('Thickness (nm)',fontsize = 30)
# ax.set_xlabel('Cycle number', fontsize = 30)
# ax.set_xlim(0,70)
# ax.set_ylim(0,50)
# ax.legend(fontsize = 16, loc = "upper left")
# # plt.savefig("series 123 with bar_3",bbox_inches = "tight")
# plt.show()


# # Visualization of mLbL thickness by dip coating
import matplotlib.pyplot as plt
import numpy as np

# Dictionary to store thickness and fitting error data for each sample
samples_data = {
    'Tm66AS': {
        'thickness': [6.65, 7.55, 9.59, 12.41, 13.92, 14.67, 15.59, 22.05, 19.24, 10.28, 2.12],
        'fitting_error': [1.189, 1.367, 1.736, 1.456, 1.15, 1.217, 1.143, 13.875, 119.324, 12.198, 1.273]
    },
    'Tm65AS': {
        'thickness': [20.24, 22.91, 23.71, 21.56, 20.56, 20.7, 15.98, 12.93, 9.67, 3.92, 2.34],
        'fitting_error': [5.001, 5.549, 4.593, 2.998, 4.372, 3.394, 2.557, 8.128, 12.852, 1.778, 1.621]
    }
}

# Create a function to plot selected samples with an option to turn the fitting error on/off
def plot_selected_samples(samples_to_plot, samples_data, show_fitting_error=True):
    # Define the color palettes
    origin_color4line = ["#646464", "#f14040", "#37ad6b", "#1a6fdf", "#b177de", "#cc9900", "#00cbcc", "#7d4e4e", "#8e8e00", "#fb6501", "#6699cc", "#6fb802"]
    color4bar = ['#4e79a7', '#f28e2b', '#e15759', '#76b7b2', '#59a14f', '#edc948', '#b07aa1', '#ff9da7']

    # Use one of the color palettes for the plot
    colors = origin_color4line  # You can switch to color4bar by changing this to "colors = color4bar"

    # Create a figure and axis
    fig, ax1 = plt.subplots(figsize=(12, 6))

    # Plot thickness data for each selected sample
    for idx, sample in enumerate(samples_to_plot):
        thickness = samples_data[sample]['thickness']
        beam_position = np.arange(1, len(thickness) + 1)  # Automatically match beam positions to thickness length
        label_thickness = f'{sample}'  # Only show the sample name
        ax1.plot(beam_position, thickness, linestyle='-', color=colors[idx % len(colors)], marker='o')

    # Find the largest beam position across all samples
    max_beam_position = max([len(samples_data[sample]['thickness']) for sample in samples_to_plot])

    # Set x-ticks using the largest beam position
    ax1.set_xticks(np.arange(1, max_beam_position + 1))

    # If fitting error is shown, plot fitting error as dashed line
    if show_fitting_error:
        ax2 = ax1.twinx()  # Create secondary axis for fitting error
        for idx, sample in enumerate(samples_to_plot):
            fitting_error = samples_data[sample]['fitting_error']
            beam_position = np.arange(1, len(fitting_error) + 1)
            ax2.plot(beam_position, fitting_error, linestyle='--', color=colors[idx % len(colors)], marker='o')

        # Set second y-axis label for fitting error
        ax2.set_ylabel('Fitting Error', fontsize=12, fontweight='bold')

    # Add labels and title with bold font for thickness (primary y-axis)
    ax1.set_xlabel('Beam Position', fontsize=12, fontweight='bold')
    ax1.set_ylabel('Film Thickness', fontsize=12, fontweight='bold')
    ax1.set_title('Ellipsometry Results' if show_fitting_error else 'Film Thickness', fontsize=14, fontweight='bold')

    # Combine legends to show only sample names
    legend_elements = [plt.Line2D([0], [0], color=colors[idx % len(colors)], lw=2, label=samples_to_plot[idx])
                       for idx in range(len(samples_to_plot))]

    # Add separate legend for line styles if fitting error is shown
    if show_fitting_error:
        legend_elements += [plt.Line2D([0], [0], color='gray', lw=2, linestyle='-', label='Thickness'),
                            plt.Line2D([0], [0], color='gray', lw=2, linestyle='--', label='Fitting Error')]

    # Display the legend with sample names and line styles
    ax1.legend(handles=legend_elements, loc='upper right', framealpha=0.5)

    # Show the plot
    plt.show()

    
# # Call the function
# plot_selected_samples(['Tm66AS', 'Tm68AS', 'Tm69AS', 'Tm70AS'], samples_data, show_fitting_error = True)
