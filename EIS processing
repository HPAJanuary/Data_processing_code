import numpy as np
import math
# Plot and curve fit
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import matplotlib
from cycler import cycler

# To check the current font type
from matplotlib.font_manager import findfont, FontProperties

# For running code on Colab
# from google.colab import drive
# drive.mount('/content/drive')

# Generating data loading text - Not fully compatible

# "Code/text" means these functions don't read/write any object from globals(). Only using the printed result to save time for typing.

# File version - you have to copy the code and save it in txt format
def String_replace(path, old_text, new_text): # All input parameters should be strings
    with open(path,"r") as file:
        text = file.read()
        text2 = text.replace(old_text, new_text)
    with open(path,"w") as file:
        file.write(text2)

# # Example
# filepath = "Replace string.txt"
# String_replace(filepath, "Mar23BL", "Mar23BL60")


# interface version
# Code/Text -- copy the printed results directly
def add_line_eis(text, idx_txt, num_data, subname  = None):
    # num_data is the total number of lines will be generated
    # idx_txt is the starting serial number right before .txt, it must be the same as the one in the original text
    # Text Condition:
    # the object name in the text should always start with _1
    # the txt of dpt must be less than 10
    # Copy/paste the original text, add another slash in front of "\t", add different quote sign on both sides, i.e. single quote sign

    if subname == None:
        # Find the index of "x.dpt" in the text
        index1 = text.find("_1")
        index2 = text.find("{}.txt".format(idx_txt))

        # Check if "{}.txt" is found
        if index1 != -1 and index2 != -1:
            # Generate new lines with increasing numbers
            # The index of object name is forced to start with _1
            new_lines = [text[:index1] + "_{}".format(i + 1 - idx_txt) + text[index1+2:index2] + "{}.txt".format(i) + text[index2+5:] for i in range(idx_txt, idx_txt + num_data)]
            # Print the new lines
            for line in new_lines:
                print(line)
            return new_lines

    else:
        # subname is used to prevent error when the data is named like "_1_1"
        # Find the index of "x.txt" in the text
        index1 = text.find("{}_1".format(subname))
        index2 = text.find("{}.txt".format(idx_txt))

        # Check if "{}.txt" is found
        if index1 != -1 and index2 != -1:
            # Generate new lines with increasing numbers
            # The index of file name is forced to start with _1
            new_lines = [text[:index1] + "{}_{}".format(subname, i + 1 - idx_txt) + text[index1+len(subname)+2:index2] + "{}.txt".format(i) + text[index2+5:] for i in range(idx_txt, idx_txt + num_data)]
            # Print the new lines
            for line in new_lines:
                print(line)
            return new_lines
        else:
            print(f"Error :the string {idx_txt}.txt is not found in the provided text")

# Code/Text -- replace strings in the printed lines
def replace_line(lines, old_text, new_text):
    replaced_lines = []
    for line in lines:
        correct_line = line.replace(old_text, new_text)
        replaced_lines.append(correct_line)
        print(correct_line)
    return replaced_lines


# Code/Text -- Generate the code for the batch of data
def create_data_list(text, idx_data, num_data, num_step = 1, mode = 0):
    # idx_dpt is the starting index, it must be the same as the one in the original text
    # num_data is the total number of data will be generated, it is the data of the list
    # mode 0 generates the data name without quote signs, usually used for create a data list
    # mode 1 generates the data name with quote signs, usually used for create a legend list
    # mode 2 generates the data name with quote signs and adds the name with .txt suffix

    # Find the index of data serial number in the name
    # Can't just locate the serial number as [-1:] in the string, sometimes the serial number will be bigger than 9
    index = text.find("_{}".format(idx_data))

    # Check if the index exists
    if index != -1:
        # Create a jist of data names
        new_text = [text[:index] + f"_{i}" for i in range(idx_data, idx_data + num_data, num_step)]
        print(type(new_text))

        # Output mode
        if mode == 0:
            new_data_text = ", ".join(new_text)
            print(new_data_text)
        if mode == 1:
            print(new_text)
        if mode == 2:
            new_format_text = [file_name + ".txt" for file_name in new_text]
            print(new_format_text)
    else:
        print(f"Error: the string _{idx_data} is not found in the provided text")
      
    
# # Recall Example
# text = "eis_m34_1 = open_txt('EIS_JJ_m34_1.txt',eis_path)"

# code1 = add_line_eis(text, 1, 4)
# code2 = replace_line(code1, "38", "34")
# # error example
# code3 = add_line_eis(text, 1, 4, subname = 'm37')

# text = "Trial_2"
# create_data_list(text, 2, 4, 1, mode = 1)
# create_data_list(text, 2, 4, 1)

# Read file

# Load file
# Default import mode = 0, it can be used to plot cyclic voltammetry
# When import mode = 1, the data before potentio EIS measurement will be automatically removed
def open_txt(file,path = "", imp_mode = 0):
    with open(path + file) as data:
        data_list = data.read()

    # Split raw data by each data point collected.
    # Each data point: Potential(V) Current(A) Elapsed Time(s) Frequency(Hz) Zre(ohms) Zim(ohms) Phase of Z(deg)
    rows = data_list.split('\n')
    # print(np.shape(rows)) # how many data points in the file

    # Find the number of parameter recorded during experiment
    # Sometimes the last column of raw file includes empty string
    # Determine whether there is an empty string
    empty_string = '' in rows[1].split("\t")
    if empty_string:
        col_num = len(rows[0].split("\t")) - 1 # last column in raw data file is ""
    else:
        col_num = len(rows[0].split("\t")) # last column is valuable data

    # Create an empty 2D array with the target shape
    row_num = len(rows) - 1 # last row in raw data file is ""
    obj_write = np.zeros((col_num,row_num-1)) # 1 row less due to the title

    # Write each data point (row)
    for idx_row in range(1,row_num): # skip the first title row
        # Write each parameter in current data point
        for idx_col in range(0,col_num):
            obj_write[idx_col][idx_row-1] = float(rows[idx_row].split("\t")[idx_col])

    if imp_mode == 1:
        # Find the column index of the first nonzero impedance
        start_ind = None
        for i, num in enumerate(obj_write[4]): # 5th row is realistic impedance
            if num != 0:
                start_ind = i
                break
        EIS_array = obj_write[:,start_ind:]
        return EIS_array

    else:
        return obj_write

# Test
# path1 = '/content/drive/MyDrive/EIS/'
# eis_t_2 = open_txt('EIS_JJ_trial2.txt',path1, imp_mode = 1)
# eis_t_1 = open_txt('EIS_JJ_trial1.txt',path1, imp_mode = 1)
# cv_t_1 = open_txt('CV_bare_Au_trial1.txt',path2)

# EIS Plot

def Nyqst_plot(filelist, legends, x_tick = None, y_tick = None):
    # Plot size
    fig, ax = plt.subplots()
    # fig.subplots_adjust(right=0.75)
    fig.set_figheight(8)
    fig.set_figwidth(8)

    # Grid
    ax.grid(which='both')
    ax.grid(which='minor', alpha=0.2)
    ax.grid(which='major', alpha=0.5)

    # Tick
    # tick label size
    ax.tick_params(axis='x', labelsize= 15)
    ax.tick_params(axis='y', labelsize= 15)
    # tick size
    ax.tick_params(which = 'major',length=8)
    ax.tick_params(which = 'minor',length=5)
    ax.tick_params(which='both', width=2)

    # Global plotting parameters
    legend_pos = ['upper left', 'upper right', 'lower left', 'lower right']
    shape = ['solid','dashed','dotted','dashdotted']
    # shape_list = ['solid','solid','dashed','solid','solid','solid','solid','solid','solid']
    Rainbow = ["red","chocolate","orange","gold","yellowgreen","green","aqua","deepskyblue","blueviolet","pink","gray"]
    Default_colorcycle = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']
    tab20 = plt.get_cmap("tab20")
    origin_like = ["#646464","#f14040","#37ad6b","#1a6fdf","#b177de","#cc9900","#00cbcc","#7d4e4e","#8e8e00","#fb6501","#6699cc","#6fb802"]
    matplotlib.rcParams['axes.prop_cycle'] = cycler('color', origin_like)

    # x-axis
    ax.set_xlabel("$Z_{re}$ (Ohm)",fontsize = 30)
    if x_tick is not None:
        ax.set_xticks(x_tick) # set tick includes the limit of x
        ax.set_xlim(min(x_tick),max(x_tick))
    # ax.set_xscale('log')

    # y-axis
    ax.set_ylabel("$-Z_{im}$ (Ohm)",fontsize = 30)
    if y_tick is not None:
        ax.set_yticks(y_tick) # set tick includes the limit of y
        ax.set_ylim(min(y_tick),max(y_tick))
    # ax.set_yscale('log')


    # Iterate the datafile to plot
    for i in range(0,len(filelist)):
        ax.scatter(filelist[i][4],-1*filelist[i][5],s = 20,label = legends[i])
    ax.legend(loc = legend_pos[0], fontsize = 15)
    plt.show()

def Bode_plot(filelist, legends, x_tick = None, y_tick = None):
    # Plot size
    fig, ax = plt.subplots(1, 2)
    # fig.subplots_adjust(right=0.25)
    fig.set_figheight(6)
    fig.set_figwidth(14)

    # Global plotting parameters
    legend_pos = ['upper left', 'upper right', 'lower left', 'lower right']
    shape = ['solid','dashed','dotted','dashdotted']
    # shape_list = ['solid','solid','dashed','solid','solid','solid','solid','solid','solid']
    Rainbow = ["red","chocolate","orange","gold","yellowgreen","green","aqua","deepskyblue","blueviolet","pink","gray"]
    Default_colorcycle = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']
    tab20 = plt.get_cmap("tab20")
    origin_like = ["#646464","#f14040","#37ad6b","#1a6fdf","#b177de","#cc9900","#00cbcc","#7d4e4e","#8e8e00","#fb6501","#6699cc","#6fb802"]
    matplotlib.rcParams['axes.prop_cycle'] = cycler('color', origin_like)

    # Set the parameters that apply to both axes
    for one_ax in ax:
        # Grid
        # ax.grid(which='both')
        one_ax.grid(which='minor', alpha=0.2)
        one_ax.grid(which='major', alpha=0.5)

        # Tick
        # tick label size
        one_ax.tick_params(axis='x', labelsize= 15)
        one_ax.tick_params(axis='y', labelsize= 15)
        # tick size
        one_ax.tick_params(which = 'major',length=8)
        one_ax.tick_params(which = 'minor',length=5)
        one_ax.tick_params(which='both', width=2)


    # Z vs Freq
    # x-axis
    ax[0].set_xlabel("Frequency (Hz)",fontsize = 20)
    if x_tick is not None:
        ax[0].set_xticks(x_tick[0]) # set tick includes the limit of x
        ax[0].set_xlim(min(x_tick[0]),max(x_tick[0]))
    ax[0].set_xscale('log')
    # y-axis
    ax[0].set_ylabel("$Z_{0}$",fontsize = 20)
    if y_tick is not None:
        ax[0].set_yticks(y_tick[0]) # set tick includes the limit of y
        ax[0].set_ylim(min(y_tick[0]),max(y_tick[0]))
    ax[0].set_yscale('log')

    # Phase vs Freq
    # x-axis
    ax[1].set_xlabel("Frequency (Hz)",fontsize = 20)
    if x_tick is not None:
        ax[1].set_xticks(x_tick[1]) # set tick includes the limit of x
        ax[1].set_xlim(min(x_tick[1]),max(x_tick[0]))
    ax[1].set_xscale('log')
    # y-axis
    ax[1].set_ylabel("Phase",fontsize = 20)
    if y_tick is not None:
        ax[1].set_yticks(y_tick[1]) # set tick includes the limit of y
        ax[1].set_ylim(min(y_tick[1]),max(y_tick[1]))
    # ax[1].set_yscale('log')
    ax[1].invert_yaxis() # Flip the y-axis of phase angle by convention

    # Iterate the datafile to plot
    for i in range(0,len(filelist)):
        # Absolute impedance
        abs_Z = (filelist[i][4]**2 + filelist[i][5]**2)**0.5
        phase = np.arctan(filelist[i][5]/filelist[i][4]) # tan (angle) = Zim/Zre
        angle = np.degrees(phase) # convert radian to degree
        ax[0].scatter(filelist[i][3], abs_Z,s = 20,label = legends[i])
        ax[1].scatter(filelist[i][3], angle,s = 20,label = legends[i])
    ax[0].legend(loc = legend_pos[1], fontsize = 15)
    ax[1].legend(loc = legend_pos[1], fontsize = 15)
    plt.show()

# Recall Example
# m36 = [eis_m36_1, eis_m36_2, eis_m36_3, eis_m36_4]
# legends = ['100 mM', '32 mM', '10 mM', '3.2 mM']
# log_seq = np.logspace(np.log10(1), np.log10(10**6), 7)
# Nyqst_plot(m36, legends,  x_tick = np.arange(0,16000,2000), y_tick = np.arange(0,16000,2000))
# Bode_plot(m36, legends, x_tick = [log_seq, log_seq], y_tick = [log_seq, np.arange(-90, 10, 10)])

# CV Plot

def CV_plot(filelist, legends, x_tick = None, y_tick = None):
    # Plot size
    fig, ax = plt.subplots()
    # fig.subplots_adjust(right=0.75)
    fig.set_figheight(8)
    fig.set_figwidth(8)

    # Grid
    ax.grid(which='both')
    ax.grid(which='minor', alpha=0.2)
    ax.grid(which='major', alpha=0.5)

    # Tick
    # tick label size
    ax.tick_params(axis='x', labelsize= 15)
    ax.tick_params(axis='y', labelsize= 15)
    # tick size
    ax.tick_params(which = 'major',length=8)
    ax.tick_params(which = 'minor',length=5)
    ax.tick_params(which='both', width=2)

    # Global plotting parameters
    legend_pos = ['upper left', 'upper right', 'lower left', 'lower right']
    shape = ['solid','dashed','dotted','dashdotted']
    # shape_list = ['solid','solid','dashed','solid','solid','solid','solid','solid','solid']
    Rainbow = ["red","chocolate","orange","gold","yellowgreen","green","aqua","deepskyblue","blueviolet","pink","gray"]
    Default_colorcycle = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']
    tab20 = plt.get_cmap("tab20")
    origin_like = ["#646464","#f14040","#37ad6b","#1a6fdf","#b177de","#cc9900","#00cbcc","#7d4e4e","#8e8e00","#fb6501","#6699cc","#6fb802"]
    matplotlib.rcParams['axes.prop_cycle'] = cycler('color', origin_like)

    # x-axis
    ax.set_xlabel("Potential (V)",fontsize = 30)
    if x_tick is not None:
        ax.set_xticks(x_tick) # set tick includes the limit of x
        ax.set_xlim(min(x_tick),max(x_tick))
    # ax.set_xscale('log')

    # y-axis
    ax.set_ylabel("Current (A)",fontsize = 30)
    if y_tick is not None:
        ax.set_yticks(y_tick) # set tick includes the limit of y
        ax.set_ylim(min(y_tick),max(y_tick))
    # ax.set_yscale('log')


    # Iterate the datafile to plot
    for i in range(0,len(filelist)):
        ax.scatter(filelist[i][0],filelist[i][1],s = 5,label = legends[i])
    ax.legend(loc = legend_pos[0], fontsize = 15)
    plt.show()

# Recall Example
# cv_trial = [cv_t_1, cv_t_2, cv_t_3, cv_t_4, cv_t_5]
# legends = ['old_D1_1', 'old_D1_2', 'new_D1', 'new_D2', 'new_D4']
# CV_plot(cv_trial[0:2], legends[0:2], x_tick = np.arange(-1.2,0.6,0.2))
